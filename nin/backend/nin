#!/usr/bin/env node

const compile = require('./compile');
const newProject = require('./new-project');
const program = require('commander');
const render = require('./render');
const serve = require('./serve');
const optimize = require('./optimize');
const utils = require('./utils');

program
  .version(utils.getNinMetadata().version);

program.Command.prototype._outputHelp = program.Command.prototype.outputHelp;
program.Command.prototype.outputHelp = function() {
  return this._outputHelp(utils.colorizeCommanderHelpText);
};

program
  .command('new')
  .description('Turns <dirname> into a nin project')
  .arguments('<dirname>', 'Where to create the new project')
  .action(newProject);

program
  .command('compile')
  .description('Compile the nin project')
  .option('--no-optimize-shaders', 'Skip compressing shaders')
  .option('--no-closure-compiler', 'Bypass Google Closure Compiler (faster)')
  .action(options => compile.compile(utils.findProjectRootOrExit(process.cwd()), options));

program
  .command('run [port]')
  .description('Run the backend project')
  .action(port => serve.serve(utils.findProjectRootOrExit(process.cwd()), port));

program
  .command('render')
  .description('Render recorded pngs to a video file')
  .action(() => render.render(utils.findProjectRootOrExit(process.cwd())));

program
  .command('optimize')
  .description('Optimize png and jpg assets')
  .action(() => optimize.optimize(utils.findProjectRootOrExit(process.cwd())));

const result = program.parse(process.argv);

if(typeof result.args[result.args.length - 1] != 'object') {
  program.outputHelp();
}
